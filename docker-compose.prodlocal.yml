services:
  postgres:
    image: postgres:15
    restart: always
    container_name: ocr-p13-postgres-jdbc-chat-prodlocal
    environment:
      POSTGRES_DB: support_db
      POSTGRES_USER: ${P13_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${P13_DB_PASSWORD:-password}
#      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
#      PGDATA: /var/lib/postgresql/data/pgdata
#      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "8402:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "support_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - chat-network
#    command:
#      - "postgres"
#      - "-c"
#      - "max_connections=100"
#      - "-c"
#      - "shared_buffers=256MB"
#      - "-c"
#      - "work_mem=16MB"
#      - "-c"
#      - "maintenance_work_mem=64MB"
#      - "-c"
#      - "max_prepared_transactions=0"
#      - "-c"
#      - "log_statement=all"

  redis:
    image: redis:7
    ports:
      - "8403:6379"

  backend:
    image: cpierres/ocr-p13-chat-backend-prodlocal:${PROJECT_VERSION:-1.0.0-SNAPSHOT}
    container_name: ocr-p13-chat-backend-prodlocal-${PROJECT_VERSION:-1.0.0-SNAPSHOT}
    restart: on-failure:5
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      # Configuration Redis - AJOUT
      REDIS_HOST: redis
      REDIS_PORT: 6379
      P13_FRONTEND_URL: http://localhost:8400 #pour CORS
      P13_DB_URL: postgresql://postgres:8402
      P13_DB_USER: ${P13_DB_USER}
      P13_DB_PASSWORD: ${P13_DB_PASSWORD}
      P13_JWT_SECRET_KEY: ${P13_JWT_SECRET_KEY}
      P13_JWT_EXPIRATION_TIME: ${P13_JWT_EXPIRATION_TIME}
      SPRING_JDBC_URL: jdbc:postgresql://postgres:8402/support_db
#      SPRING_FLYWAY_URL: jdbc:postgresql://postgres:8402/support_db
      SPRING_PROFILES_ACTIVE: prodlocal
#      SPRING_FLYWAY_CONNECT_RETRIES: 3
#      SPRING_FLYWAY_CONNECT_RETRY_INTERVAL: 10
#      SPRING_FLYWAY_BASELINE_ON_MIGRATE: "true"
#      SPRING_FLYWAY_BASELINE_VERSION: "0"
#     JAVA_TOOL_OPTIONS: "-Xms256m -Xmx512m -Dspring.flyway.driver-class-name=org.postgresql.Driver"
    ports:
      - "8401:8083"
    networks:
      - chat-network
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://backend:8080/actuator/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 40s

  frontend:
#    build:
#      context: ./modules/front
#      dockerfile: backend/Dockerfile
#      args:
#        ENV_NAME: prodlocal # DÃ©finit env pour Angular et nginx
#        VERSION: ${PROJECT_VERSION:-1.0.0-SNAPSHOT}
    image: cpierres/ocr-p13-chat-frontend-prodlocal:${PROJECT_VERSION:-1.0.0-SNAPSHOT}
    container_name: ocr-p13-chat-frontend-prodlocal
    restart: always
    depends_on:
      - backend
    ports:
      - "8400:80"
    networks:
      - chat-network

volumes:
  postgres_data:
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device:
#      device: ${P13_DOCKER_PATH_VOLUME}

networks:
  chat-network:
    driver: bridge
