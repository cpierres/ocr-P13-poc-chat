package com.cpierres.p13.poc.backend.config;

import com.cpierres.p13.poc.backend.entity.User;
import com.cpierres.p13.poc.backend.entity.UserRole;
import com.cpierres.p13.poc.backend.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

@Component
@Slf4j
public class DataInitializer implements CommandLineRunner {

    @Autowired
    private UserRepository userRepository;

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        try {
            log.info("üöÄ Initialisation des donn√©es de d√©monstration POC Chat...");

            // V√©rifier la connexion √† la base de donn√©es
            long userCount = userRepository.count();
            log.info("üìä Nombre d'utilisateurs existants : {}", userCount);

            initializeUsers();
            log.info("‚úÖ Donn√©es de d√©monstration initialis√©es avec succ√®s !");

        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'initialisation des donn√©es : {}", e.getMessage(), e);
            throw e; // Re-lancer l'exception pour arr√™ter l'application en cas d'erreur critique
        }
    }

    private void initializeUsers() {
        try {
            // Cr√©er un client de d√©monstration
            if (!userRepository.existsByEmail("client.demo@yourcaryourway.com")) {
                User client = new User();
                client.setFirstName("Christophe");
                client.setLastName("Pierr√®s");
                client.setEmail("client.demo@yourcaryourway.com");
                client.setRole(UserRole.CLIENT);
                userRepository.save(client);
                log.info("‚úÖ Client de d√©monstration cr√©√© : {} (ID: {})", client.getEmail(), client.getId());
            } else {
                log.info("‚ÑπÔ∏è Client de d√©monstration existe d√©j√† : client.demo@yourcaryourway.com");
            }

            // Cr√©er un agent de d√©monstration
            if (!userRepository.existsByEmail("agent.demo@yourcaryourway.com")) {
                User agent = new User();
                agent.setFirstName("Marie");
                agent.setLastName("Agent");
                agent.setEmail("agent.demo@yourcaryourway.com");
                agent.setRole(UserRole.AGENT);
                userRepository.save(agent);
                log.info("‚úÖ Agent de d√©monstration cr√©√© : {} (ID: {})", agent.getEmail(), agent.getId());
            } else {
                log.info("‚ÑπÔ∏è Agent de d√©monstration existe d√©j√† : agent.demo@yourcaryourway.com");
            }

        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la cr√©ation des utilisateurs de d√©monstration : {}", e.getMessage(), e);
            throw e;
        }
    }
}